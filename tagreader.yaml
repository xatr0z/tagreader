# Insert your SSID and Your PWD after inital setup
wifi:
  networks:
    - ssid: !secret esphome_ssid
      password: !secret esphome_pwd
  ap:
    ssid: ${devicename}

# Enable the captive portal for inital WiFi setup
captive_portal:



substitutions:
  devicename: tagreader
  friendly_name: TagReader

esphome:
  name: $devicename
  platform: ESP8266
  board: nodemcuv2
  
  # Automatically add the mac address to the name
  # so you can use a single firmware for all devices
  name_add_mac_suffix: true

  # This will allow for (future) project identification,
  # configuration and updates.
  project:
    name: adonno.tag_reader
    version: "1.4"
# If buzzer is enabled, notify on api connection success
  on_boot:
    priority: -10
    then:
    - wait_until:
        api.connected:
    - logger.log: API is connected!
    - rtttl.play: "success:d=24,o=5,b=100:c,g,b"
    - light.turn_on:
        id: activity_led
        brightness: 100%
        flash_length: 500ms
    - switch.turn_on: buzzer_enabled
    - switch.turn_on: led_enabled

# Define switches to control LED and buzzer from HA
switch:
- platform: template
  name: "${friendly_name} Buzzer Enabled"
  id: buzzer_enabled
  icon: mdi:volume-high
  optimistic: true
  restore_state: true
- platform: template
  name: "${friendly_name} LED enabled"
  id: led_enabled
  icon: mdi:alarm-light-outline
  optimistic: true
  restore_state: true

# Enable logging
logger:
  # level: VERY_VERBOSE
  # level: VERBOSE

# Enable Home Assistant API
api:
  services:
  - service: rfidreader_tag_ok
    then:
    - rtttl.play: "beep:d=16,o=5,b=100:b"

  - service: rfidreader_tag_ko
    then:
    - rtttl.play: "beep:d=8,o=5,b=100:b"

  - service: play_rtttl
    variables:
      song_str: string
    then:
    - rtttl.play: !lambda 'return song_str;'

  - service: write_tag_random
    then:
    - lambda: |-
        static const char alphanum[] = "0123456789abcdef";
        std::string uri = "https://www.home-assistant.io/tag/";
        for (int i = 0; i < 8; i++)
          uri += alphanum[random_uint32() % (sizeof(alphanum) - 1)];
        uri += "-";
        for (int j = 0; j < 3; j++) {
          for (int i = 0; i < 4; i++)
            uri += alphanum[random_uint32() % (sizeof(alphanum) - 1)];
          uri += "-";
        }
        for (int i = 0; i < 12; i++)
          uri += alphanum[random_uint32() % (sizeof(alphanum) - 1)];
        auto message = new nfc::NdefMessage();
        message->add_uri_record(uri);
        ESP_LOGD("tagreader", "Writing payload: %s", uri.c_str());
        id(pn532_board).write_mode(message);


  - service: write_tag_id
    variables:
      tag_id: string
    then:
    - light.turn_on:
        id: activity_led
        brightness: 100%
    - lambda: |-
        auto message = new nfc::NdefMessage();
        std::string uri = "https://www.home-assistant.io/tag/";
        uri += tag_id;
        message->add_uri_record(uri);
        id(pn532_board).write_mode(message);
    - wait_until:
        not:
          pn532.is_writing:
    - light.turn_off:
        id: activity_led

  - service: clean_tag
    then:
    - light.turn_on:
        id: activity_led
        brightness: 100%
    - lambda: 'id(pn532_board).clean_mode();'
    - wait_until:
        not:
          pn532.is_writing:
    - light.turn_off:
        id: activity_led

  - service: cancel_writing
    then:
    - lambda: 'id(pn532_board).read_mode();'

# Enable OTA upgrade
ota:

spi:
  clk_pin: D4
  mosi_pin: D2
  miso_pin: D3
  
pn532_spi:
  id: pn532_board
  cs_pin: D1
  on_tag:
    then:
    - homeassistant.tag_scanned: !lambda |
        if (!tag.has_ndef_message()) {
          ESP_LOGD("tagreader", "No NDEF");
          return x;
        }
        auto message = tag.get_ndef_message();
        auto records = message->get_records();
        for (auto &record : records) {
          std::string payload = record->get_payload();
          size_t pos = payload.find("https://www.home-assistant.io/tag/");
          if (pos != std::string::npos) {
            return payload.substr(pos + 34);
          }
        }
        ESP_LOGD("tagreader", "Bad NDEF, fallback to uid");
        return x;
    - if:
        condition:
          switch.is_on: buzzer_enabled
        then:
        - rtttl.play: "success:d=24,o=5,b=100:c,g,b"
    - if:
        condition:
          switch.is_on: led_enabled
        then:
        - light.turn_on:
            id: activity_led
            brightness: 100%
            flash_length: 500ms

output:
# Define the buzzer output
- platform: esp8266_pwm
  pin: D7
  id: buzzer
# Define the led output
- platform: esp8266_pwm
  pin: D5
  id: activity_led_output

binary_sensor:
  - platform: status
    name: "${friendly_name} Status"

# Define buzzer as output for RTTTL
rtttl:
  output: buzzer

# Configure LED
# Use single LED instead of WS2812 
light: 
- platform: monochromatic
  name: "${friendly_name} LED"
  output: activity_led_output
  id: activity_led
  restore_mode: ALWAYS_OFF
